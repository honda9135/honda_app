React.js&Next.js超入門

掌田津耶乃

https://www.amazon.co.jp/React-js-Next-js%E8%B6%85%E5%85%A5%E9%96%80-%E6%8E%8C%E7%94%B0%E6%B4%A5%E8%80%B6%E4%B9%83-ebook/dp/B07X7DHZ9F/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&dchild=1&keywords=React.js&qid=1599026093&sr=8-1

Reactの基礎からfirebaseのfirestoreについてまでハンズオン形式で記載されている。
比較的わかりやすくて取り組みやすかった。
今後もReactの参考書として手元に置いておこうと思った。

人生100年時代どのように生きていけばいいか、どのような働き方をすればいいかを教えてくれる本であった。
色々な生き方毎に毎月いくら貯金しなければならないかなど、具体的な教えてくれる（破綻していることが分かるだけだが笑）。
ロールモデルのない新しい働き方を私達はしなければならない。

                <ul class="pagination">
                    <li class="disabled"><a href="#!" onClick={this.handleChange} value=0><i class="material-icons">chevron_left</i></a></li>
                    <li class="active"><a href="#!" onClick={this.handleChange} value=1>1</a></li>
                    <li class="waves-effect"><a href="#!" onClick={this.handleChange} value=2>2</a></li>
                    <li class="waves-effect"><a href="#!" onClick={this.handleChange} value=3>3</a></li>
                    <li class="waves-effect"><a href="#!">4</a></li>
                    <li class="waves-effect"><a href="#!">5</a></li>
                    <li class="waves-effect"><a href="#!"><i class="material-icons">chevron_right</i></a></li>
                </ul>

"babel-jest": "^26.3.0",

import React, { Component } from 'react'
import firebase from '../config/fbConfig'
import { connect } from 'react-redux'
import { firestoreConnect } from 'react-redux-firebase'
import { compose } from 'redux'

class Test extends Component {
    
    constructor(props){
        super(props);
        this.state ={
            page:1 //Paginationの現在のページ番号
        }
    }

    render(){
        console.log(this.props.books,'testtesttest')
        var db = firebase.firestore()
        console.log(this.props,'props')
        db.collection('users').doc('ZUvw66ppRIcKWvLqmdP2Dhjwk3c2').get().then((snapshot) => {
                //console.log(snapshot.data().follow,'follow')
                //console.log(this.props.follow,'test')
        })

        if (this.props.users){
            const user = this.props.users[0]
            const followers  = user.follow
            console.log(followers,'follow')
            db.collection('books').where('user',
            'in',
            followers).get()
            .then((snapshot) =>{
                snapshot.forEach((doc) =>{
                console.log(doc.data())
                })
            })
        }

        return (
            <h1>test</h1>
        )
    }
}

const mapStateToProps = (state) => {
    console.log(state.firestore.ordered.users,'users')
    console.log(state.firestore.ordered.books,'books')
    console.log(state.firebase.auth.uid,'uid')
    return {
        users: state.firestore.ordered.users,
        books:state.firestore.ordered.books,
        tags: state.book.tags,
        auth: state.firebase.auth
    }
}

//export default compose(
//    connect(mapStateToProps),
//    firestoreConnect((props) =>{
//        console.log(props,'wwwwwwwwwwwwww')
//        return (
//        [
//        { 
//            collection: 'users',
//            doc:props.auth.uid,
//         }
//        ]
//        )
//    }
//    )
//)(Test);

export default compose(
    connect(mapStateToProps),
    firestoreConnect( (props)  =>{
        console.log(props.auth.uid,'props')
        var firebaseQueries = [];

        firebaseQueries.push(
            {
                collection: 'users',
                doc:props.auth.uid,
            }
        )

        if (props.users){
            firebaseQueries.push(
                {
                    collection:'books',
                    orderBy:['createdAt','desc'],
                    where:['user','in',props.users[0].follow]
                }
            )
        }

        console.log(firebaseQueries)
    
        return firebaseQueries
    })
)(Test);

display: flex;